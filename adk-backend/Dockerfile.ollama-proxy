# Ollama Proxy Dockerfile - Translation layer between OpenWebUI and ADK Backend
# This container translates Ollama API requests to ADK backend calls

# Stage 1: Builder stage to install dependencies
FROM python:3.12-slim as builder

# Set environment variables for Poetry
ENV POETRY_NO_INTERACTION=1 \
    POETRY_VIRTUALENVS_CREATE=false \
    POETRY_CACHE_DIR='/var/cache/pypoetry'

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Install Poetry
RUN pip install poetry

# Copy only the dependency definition files to leverage Docker cache
WORKDIR /app
COPY pyproject.toml poetry.lock ./

# Install only production dependencies needed for the proxy
RUN poetry install --only=main --no-root

# Stage 2: Final production stage
FROM python:3.12-slim as final

# Install system dependencies needed at runtime
RUN apt-get update && apt-get install -y \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Create a non-root user for security
RUN useradd --create-home --shell /bin/bash proxyuser
USER proxyuser
WORKDIR /home/proxyuser

# Copy the installed dependencies from the builder stage
COPY --from=builder /usr/local/lib/python3.12/site-packages /usr/local/lib/python3.12/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Copy the Ollama proxy script
COPY --chown=proxyuser:proxyuser ollama_proxy.py ./

# Set environment variables for the proxy
ENV PYTHONPATH=/home/proxyuser:$PYTHONPATH \
    PATH=/usr/local/bin:$PATH \
    ADK_BACKEND_URL=http://localhost:8000 \
    PROXY_PORT=11434 \
    LOG_LEVEL=INFO

# Expose the port the Ollama proxy will run on
EXPOSE 11434

# Health check to ensure the proxy is running
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:11434/health || exit 1

# Command to run the Ollama proxy
CMD ["python", "ollama_proxy.py"]
